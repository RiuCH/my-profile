---
// src/pages/photos.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import '../styles/global.css'; 
import '../styles/photos.css'; 
import { v2 as cloudinary } from 'cloudinary'; // Import Cloudinary SDK

const parentFolderToList = 'portfolio/Shanghai'; // Specify the parent folder to list subfolders
// Configure Cloudinary using environment variables (ensure they are set in .env)
cloudinary.config({ 
  cloud_name: import.meta.env.CLOUDINARY_CLOUD_NAME, 
  api_key: import.meta.env.CLOUDINARY_API_KEY, 
  api_secret: import.meta.env.CLOUDINARY_API_SECRET,
  secure: true 
});

cloudinary.api.ping()
  .then(result => {
    console.log('Cloudinary Ping Result:', result);
    // A successful ping usually returns { status: 'ok' }
    if (result?.status === 'ok') {
      console.log('\n✅ SUCCESS: Connection to Cloudinary successful!');
      console.log('Your environment variables seem correct.');
    } else {
      console.error('\n⚠️ FAILED: Connection established, but ping status was not "ok". Result:', result);
      console.error('This might indicate an issue with the Cloudinary API service itself.');
    }
  })

// --- Define your events with the Cloudinary folder path for each ---
let photoEvents = [
  {
    date: "Apr 2025", 
    title: "France Trip",
    description: "",
    cloudinaryFolder: 'portfolio/France2025',
    photos: [ ]
  },
  {
    date: "Feb 2025", 
    title: "Shanghai Trip",
    description: "",
    cloudinaryFolder: 'portfolio/Shanghai2025',
    photos: [ ]
  },
  {
    date: "Dec 2024",
    title: "Tokyo Trip",
    description: "",
    cloudinaryFolder: 'portfolio/Tokyo2024/',
    photos: [ ]
  },
  {
    date: "Jun 2024",
    title: "CVPR Conference at Seattle",
    description: "",
    cloudinaryFolder: 'portfolio/Seattle2024',
    photos: [ ]
  },
  {
    date: "Mar 2024",
    title: "Tokyo Trip",
    description: "",
    cloudinaryFolder: 'portfolio/Tokyo2024-2/',
    photos: [ ]
  },
  // {
  //   date: "Dec 2023",
  //   title: "Hukuba Trip",
  //   description: "",
  //   cloudinaryFolder: 'portfolio/japan',
  //   photos: [ ]
  // },
  {
    date: "Mar 2023",
    title: "Singapore Trip",
    description: "",
    cloudinaryFolder: 'portfolio/Singapore2023',
    photos: [ ]
  }
  // --- Add more photo events here ---
];

try {
  // Create an array of promises, one for each folder fetch operation
  const fetchPromises = photoEvents.map(async (event) => {
    // Skip if no folder is specified for this event
    if (!event.cloudinaryFolder) {
      console.warn(`Event "${event.title}" has no cloudinaryFolder specified.`);
      return event; // Return the event object unchanged
    }

    console.log(`Fetching images for "${event.title}" from Cloudinary folder: ${event.cloudinaryFolder}`);
    
    // Ensure folder path ends with '/' for accurate prefix matching if needed
    const folderPrefix = event.cloudinaryFolder.endsWith('/') ? event.cloudinaryFolder : event.cloudinaryFolder;

    // Fetch resources from the specific folder
    const results = await cloudinary.api.resources({ 
        type: 'upload',
        prefix: folderPrefix, 
        max_results: 49 // Limit to 10 photos per event, adjust as needed
    });

    const sortedResources = results.resources.sort((a, b) => {
      // Sort by public_id (or any other property you prefer)
        return a.public_id.localeCompare(b.public_id);
    });
    
    // Populate the photos array for the current event
    event.photos = sortedResources.map(resource => ({
      src: resource.secure_url, 
      alt: resource.context?.alt || `Photo from ${event.title}`, // Use Cloudinary context for alt text if set
      publicId: resource.public_id,
      width: resource.width,
      height: resource.height
    }));

    console.log(`Fetched ${event.photos.length} photos for "${event.title}".`);
    return event; // Return the event object with the populated photos array
  });

  // Wait for all the fetching operations to complete
  photoEvents = await Promise.all(fetchPromises);

} catch (error) {
  console.error("Error fetching images for events from Cloudinary:", error);
  // In case of error, photoEvents will proceed with empty photos arrays
}
---
<BaseLayout title="Photo Gallery">

  {/* Main section for the photos page */}
  <section id="photos" class="section photos-section">
    <h2> 📷 My Photos</h2>

    {/* Container for the timeline layout */}
    <div class="timeline-container">
      
      {/* Map through your photo event data */}
      {photoEvents.map(event => (
        <div class="timeline-entry">
          
          {/* Left side: Timeline marker and date */}
          <div class="timeline-marker-container">
            <div class="timeline-marker"></div> {/* The dot on the timeline */}
            <span class="timeline-date">{event.date}</span> {/* Date/Label */}
          </div>
          
          {/* Right side: Event details and photo gallery */}
          <div class="event-details">
            <h3>{event.title}</h3>
            <p class="event-description">{event.description}</p>
            
            {/* Photo Gallery Grid */}
            <div class="photo-gallery">
              {event.photos.map(photo => {
                  // Generate optimized thumbnail URL
                  const thumbnailUrl = cloudinary.url(photo.publicId, { 
                      width: 400, 
                      height: 400, 
                      crop: "pad", 
                      background: "auto", 
                      quality: 75, // EXAMPLE: Set quality to 75 (lower = smaller file)
                      // quality: "auto", // Use this for automatic quality balancing
                      fetch_format: "auto" 
                  });
                  const lightboxUrl = cloudinary.url(photo.publicId, {
                      height: 800, 
                      quality: 100, 
                      fetch_format: "auto" 
                  });
                  return (
                    <div class="photo-item">
                      <a class="lightbox-trigger" 
                         data-lightbox-src={lightboxUrl} 
                         data-alt={photo.alt}
                         >
                        <img src={thumbnailUrl} alt={photo.alt} loading="lazy" width="400" height="400" />
                      </a>
                    </div>
                  );
                })}
            </div>
          </div>
        </div>
      ))}

    </div> {/* End timeline-container */}
  </section>

  <div id="lightbox" class="lightbox-overlay">
    {/* Prev/Next buttons */}
    
    {/* Content area (image and caption) */}
    <div class="lightbox-content">
      <!-- <button id="lightbox-prev" class="lightbox-nav prev" title="Previous image" aria-label="Previous image">
        <i class="fas fa-chevron-left"></i>
      </button> -->
      {/* Close button (inside content) */}
      <button id="lightbox-close" class="lightbox-close" title="Close" aria-label="Close image viewer">&times;</button>
      <img id="lightbox-img" src="" alt="Enlarged photo">
      <!-- <button id="lightbox-next" class="lightbox-nav next" title="Next image" aria-label="Next image">
        <i class="fas fa-chevron-right"></i>
      </button> -->
    </div>
  
  </div>

</BaseLayout>

<script>
  function setupLightbox() {
    console.log("Attempting to set up Lightbox..."); 
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = document.getElementById('lightbox-img');
    const closeButton = document.getElementById('lightbox-close');
    const triggers = document.querySelectorAll('.photo-gallery .lightbox-trigger'); 

    console.log(`Found ${triggers.length} lightbox triggers.`); 

    if (!lightbox || !lightboxImg || !closeButton) {
      console.error('Lightbox structural elements not found!');
      return; 
    }

    // Function to open the lightbox
    const openLightbox = (imgSrc, imgAlt) => {
      console.log("Opening lightbox for:", imgSrc); 
      lightboxImg.src = imgSrc; // Set the optimized lightbox image source
      lightboxImg.alt = imgAlt;
      lightbox.classList.add('visible');
      document.body.style.overflow = 'hidden'; 
    };

    // Function to close the lightbox
    const closeLightbox = () => { 
      if (lightbox) { 
          lightbox.classList.remove('visible');
      } else {
           console.error("Lightbox element null inside closeLightbox!"); 
      }
      if (document.body) {
          document.body.style.overflow = ''; 
          console.log("Body overflow reset."); 
      }
      if (lightboxImg) {
          setTimeout(() => { lightboxImg.src = ""; }, 300); 
      }
     };

    // Add click listener to all image triggers
    triggers.forEach((trigger, index) => {
      const newTrigger = trigger.cloneNode(true); // Simple way to remove old listeners
      trigger.parentNode.replaceChild(newTrigger, trigger);

      newTrigger.addEventListener('click', (e) => {
        console.log(`Trigger ${index + 1} CLICKED!`); 
        e.preventDefault(); // Prevent following the href
        console.log("preventDefault() called."); 
        
        const lightboxSrc = newTrigger.getAttribute('data-lightbox-src'); 
        const altText = newTrigger.getAttribute('data-alt');
        console.log("Image data:", { lightboxSrc, altText }); 

        if (lightboxSrc) { 
          openLightbox(lightboxSrc, altText); // Open using optimized URL
        } else {
          console.error("Could not get lightbox image source from data-lightbox-src attribute."); 
        }
      });
    });

    if (closeButton._listenerAttached !== true) { // Basic check to prevent duplicates
        closeButton.addEventListener('click', closeLightbox);
        closeButton._listenerAttached = true; // Mark as attached
        console.log("Close button listener attached."); // DEBUG
    }

    // Add click listener to overlay background to close 
    if (lightbox._listenerAttached !== true) { // Basic check
        lightbox.addEventListener('click', (e) => {
            if (e.target === lightbox) { 
                closeLightbox();
            }
        });
        lightbox._listenerAttached = true; // Mark as attached
        console.log("Overlay click listener attached."); // DEBUG
    }

    // Keyboard support (Escape key to close) 
    const handleEscKey = (e) => {
         if (e.key === 'Escape' && lightbox.classList.contains('visible')) {
            closeLightbox();
        }
    };
    document.removeEventListener('keydown', handleEscKey); // Remove previous before adding
    document.addEventListener('keydown', handleEscKey);
    console.log("Escape key listener attached/re-attached."); 


    console.log('Lightbox setup complete for Photos page.');
  }

  // Run setup on initial load and after page transitions (with duplicate run prevention)
  document.addEventListener('astro:page-load', () => { window._lightboxSetupDone = false; setupLightbox(); window._lightboxSetupDone = true; });
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
      if (!window._lightboxSetupDone) { setupLightbox(); window._lightboxSetupDone = true; }
  } else {
      document.addEventListener('DOMContentLoaded', () => { if (!window._lightboxSetupDone) { setupLightbox(); window._lightboxSetupDone = true; }});
  }
  document.addEventListener('astro:before-swap', () => { window._lightboxSetupDone = false; });

</script>